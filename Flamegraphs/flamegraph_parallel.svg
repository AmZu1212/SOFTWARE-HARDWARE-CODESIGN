<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="390.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Parallel Flamegraph</text>
<text id="details" x="10.00" y="373" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="373" > </text>
<g id="frames">
<g >
<title>entry_SYSCALL_64_after_hwframe (542,709,696 samples, 0.70%)</title><rect x="1171.8" y="293" width="8.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1174.78" y="303.5" ></text>
</g>
<g >
<title>do_futex (90,368,645 samples, 0.12%)</title><rect x="1185.5" y="165" width="1.4" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1188.54" y="175.5" ></text>
</g>
<g >
<title>exit_mm (90,368,645 samples, 0.12%)</title><rect x="1185.5" y="213" width="1.4" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1188.54" y="223.5" ></text>
</g>
<g >
<title>do_syscall_64 (320,395,542 samples, 0.42%)</title><rect x="1183.0" y="277" width="4.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1185.96" y="287.5" ></text>
</g>
<g >
<title>__do_sys_clone3 (542,709,696 samples, 0.70%)</title><rect x="1171.8" y="229" width="8.3" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1174.78" y="239.5" ></text>
</g>
<g >
<title>__vfprintf_internal (155,846,834 samples, 0.20%)</title><rect x="1148.7" y="293" width="2.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1151.74" y="303.5" ></text>
</g>
<g >
<title>do_exit (218,058,513 samples, 0.28%)</title><rect x="1184.1" y="229" width="3.4" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1187.13" y="239.5" ></text>
</g>
<g >
<title>get_futex_key (72,094,745 samples, 0.09%)</title><rect x="1185.8" y="133" width="1.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1188.82" y="143.5" ></text>
</g>
<g >
<title>x64_sys_call (581,155,474 samples, 0.75%)</title><rect x="1160.6" y="261" width="8.9" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1163.65" y="271.5" ></text>
</g>
<g >
<title>x86_pmu_event_init (460,484,296 samples, 0.60%)</title><rect x="1173.0" y="69" width="7.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1176.04" y="79.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (614,046,855 samples, 0.80%)</title><rect x="1160.1" y="293" width="9.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1163.14" y="303.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (74,352,761,909 samples, 96.47%)</title><rect x="10.1" y="277" width="1138.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="13.12" y="287.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>all (77,070,235,266 samples, 100%)</title><rect x="10.0" y="341" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>perf_event_init_task (542,709,696 samples, 0.70%)</title><rect x="1171.8" y="181" width="8.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1174.78" y="191.5" ></text>
</g>
<g >
<title>__madvise (667,796,470 samples, 0.87%)</title><rect x="1159.9" y="309" width="10.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1162.86" y="319.5" ></text>
</g>
<g >
<title>zap_pte_range (296,219,776 samples, 0.38%)</title><rect x="1165.0" y="149" width="4.5" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1168.01" y="159.5" ></text>
</g>
<g >
<title>syscall_return_via_sysret (103,588,424 samples, 0.13%)</title><rect x="1188.1" y="293" width="1.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1191.11" y="303.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (74,352,761,909 samples, 96.47%)</title><rect x="10.1" y="293" width="1138.4" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="13.12" y="303.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (363,616,153 samples, 0.47%)</title><rect x="1182.3" y="293" width="5.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1185.30" y="303.5" ></text>
</g>
<g >
<title>parallel.exe (77,066,679,685 samples, 100.00%)</title><rect x="10.0" y="325" width="1179.9" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >parallel.exe</text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (74,360,654,263 samples, 96.48%)</title><rect x="10.0" y="309" width="1138.5" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >[libstdc++.so.6.0.30]</text>
</g>
<g >
<title>__x64_sys_clone3 (542,709,696 samples, 0.70%)</title><rect x="1171.8" y="245" width="8.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1174.78" y="255.5" ></text>
</g>
<g >
<title>_GLOBAL__sub_I_global_X (496,239,679 samples, 0.64%)</title><rect x="1152.3" y="293" width="7.6" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1155.27" y="303.5" ></text>
</g>
<g >
<title>kfree (460,484,296 samples, 0.60%)</title><rect x="1173.0" y="53" width="7.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1176.04" y="63.5" ></text>
</g>
<g >
<title>lru_add_drain (65,766,231 samples, 0.09%)</title><rect x="1161.9" y="197" width="1.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1164.92" y="207.5" ></text>
</g>
<g >
<title>__x64_sys_exit (253,448,308 samples, 0.33%)</title><rect x="1183.9" y="245" width="3.8" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1186.86" y="255.5" ></text>
</g>
<g >
<title>inherit_task_group.isra.0 (542,709,696 samples, 0.70%)</title><rect x="1171.8" y="149" width="8.3" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1174.78" y="159.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (380,947,418 samples, 0.49%)</title><rect x="1163.7" y="165" width="5.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1166.71" y="175.5" ></text>
</g>
<g >
<title>do_syscall_64 (542,709,696 samples, 0.70%)</title><rect x="1171.8" y="277" width="8.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1174.78" y="287.5" ></text>
</g>
<g >
<title>find_vma_prev (67,129,980 samples, 0.09%)</title><rect x="1160.9" y="213" width="1.0" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1163.89" y="223.5" ></text>
</g>
<g >
<title>slab_free_freelist_hook.constprop.0 (460,484,296 samples, 0.60%)</title><rect x="1173.0" y="37" width="7.1" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1176.04" y="47.5" ></text>
</g>
<g >
<title>x64_sys_call (542,709,696 samples, 0.70%)</title><rect x="1171.8" y="261" width="8.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1174.78" y="271.5" ></text>
</g>
<g >
<title>__x64_sys_madvise (581,155,474 samples, 0.75%)</title><rect x="1160.6" y="245" width="8.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1163.65" y="255.5" ></text>
</g>
<g >
<title>inherit_event.constprop.0 (542,709,696 samples, 0.70%)</title><rect x="1171.8" y="133" width="8.3" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1174.78" y="143.5" ></text>
</g>
<g >
<title>MoveChunk (73,970,894,543 samples, 95.98%)</title><rect x="10.3" y="213" width="1132.5" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="13.25" y="223.5" >MoveChunk</text>
</g>
<g >
<title>futex_wake (72,094,745 samples, 0.09%)</title><rect x="1185.8" y="149" width="1.1" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1188.82" y="159.5" ></text>
</g>
<g >
<title>perf_init_event (460,484,296 samples, 0.60%)</title><rect x="1173.0" y="101" width="7.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1176.04" y="111.5" ></text>
</g>
<g >
<title>__libc_start_main@@GLIBC_2.34 (496,239,679 samples, 0.64%)</title><rect x="1152.3" y="309" width="7.6" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1155.27" y="319.5" ></text>
</g>
<g >
<title>zap_page_range (498,300,395 samples, 0.65%)</title><rect x="1161.9" y="213" width="7.6" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1164.92" y="223.5" ></text>
</g>
<g >
<title>do_madvise.part.0 (581,155,474 samples, 0.75%)</title><rect x="1160.6" y="229" width="8.9" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1163.65" y="239.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (74,335,611,970 samples, 96.45%)</title><rect x="10.3" y="229" width="1138.1" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="13.25" y="239.5" >std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>start_thread (557,113,850 samples, 0.72%)</title><rect x="1181.2" y="309" width="8.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1184.17" y="319.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (496,239,679 samples, 0.64%)</title><rect x="1152.3" y="277" width="7.6" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1155.27" y="287.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (74,352,761,909 samples, 96.47%)</title><rect x="10.1" y="261" width="1138.4" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="13.12" y="271.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>std::__invoke&lt;void  (74,344,368,713 samples, 96.46%)</title><rect x="10.1" y="245" width="1138.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="13.12" y="255.5" >std::__invoke&lt;void </text>
</g>
<g >
<title>[unknown] (220,266,222 samples, 0.29%)</title><rect x="1148.5" y="309" width="3.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1151.51" y="319.5" ></text>
</g>
<g >
<title>unmap_page_range (415,633,501 samples, 0.54%)</title><rect x="1163.2" y="181" width="6.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1166.18" y="191.5" ></text>
</g>
<g >
<title>kernel_clone (542,709,696 samples, 0.70%)</title><rect x="1171.8" y="213" width="8.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1174.78" y="223.5" ></text>
</g>
<g >
<title>do_syscall_64 (614,046,855 samples, 0.80%)</title><rect x="1160.1" y="277" width="9.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1163.14" y="287.5" ></text>
</g>
<g >
<title>clone3 (621,870,882 samples, 0.81%)</title><rect x="1170.8" y="309" width="9.5" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="1173.82" y="319.5" ></text>
</g>
<g >
<title>copy_process (542,709,696 samples, 0.70%)</title><rect x="1171.8" y="197" width="8.3" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1174.78" y="207.5" ></text>
</g>
<g >
<title>lru_add_drain_cpu (65,766,231 samples, 0.09%)</title><rect x="1161.9" y="181" width="1.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1164.92" y="191.5" ></text>
</g>
<g >
<title>perf_try_init_event (460,484,296 samples, 0.60%)</title><rect x="1173.0" y="85" width="7.1" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1176.04" y="95.5" ></text>
</g>
<g >
<title>exit_mm_release (90,368,645 samples, 0.12%)</title><rect x="1185.5" y="197" width="1.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1188.54" y="207.5" ></text>
</g>
<g >
<title>unmap_single_vma (415,633,501 samples, 0.54%)</title><rect x="1163.2" y="197" width="6.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1166.18" y="207.5" ></text>
</g>
<g >
<title>perf_event_alloc (542,709,696 samples, 0.70%)</title><rect x="1171.8" y="117" width="8.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1174.78" y="127.5" ></text>
</g>
<g >
<title>UpdateChunkPosition (364,717,427 samples, 0.47%)</title><rect x="1142.8" y="213" width="5.6" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="1145.80" y="223.5" ></text>
</g>
<g >
<title>mm_release (90,368,645 samples, 0.12%)</title><rect x="1185.5" y="181" width="1.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1188.54" y="191.5" ></text>
</g>
<g >
<title>perf_event_init_context (542,709,696 samples, 0.70%)</title><rect x="1171.8" y="165" width="8.3" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="1174.78" y="175.5" ></text>
</g>
<g >
<title>x64_sys_call (268,956,626 samples, 0.35%)</title><rect x="1183.7" y="261" width="4.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1186.75" y="271.5" ></text>
</g>
</g>
</svg>
